"""
    lodgea-python

    LODGEA SDK for Python. Check out https://docs.lodgea.io for more information.  # noqa: E501

    The version of the OpenAPI document: 1.0.2
    Contact: support@lodgea.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from lodgea-python.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from lodgea-python.exceptions import ApiAttributeError


def lazy_import():
    from lodgea-python.model.v1_property_get_post200_response_property_award_list_inner import V1PropertyGetPost200ResponsePropertyAwardListInner
    from lodgea-python.model.v1_property_get_post200_response_property_cancellation_grace_period import V1PropertyGetPost200ResponsePropertyCancellationGracePeriod
    from lodgea-python.model.v1_property_get_post200_response_property_contact_list_inner import V1PropertyGetPost200ResponsePropertyContactListInner
    from lodgea-python.model.v1_property_get_post200_response_property_facility_info import V1PropertyGetPost200ResponsePropertyFacilityInfo
    from lodgea-python.model.v1_property_get_post200_response_property_geo import V1PropertyGetPost200ResponsePropertyGeo
    from lodgea-python.model.v1_property_get_post200_response_property_guest_info import V1PropertyGetPost200ResponsePropertyGuestInfo
    from lodgea-python.model.v1_property_get_post200_response_property_media_list_inner import V1PropertyGetPost200ResponsePropertyMediaListInner
    from lodgea-python.model.v1_property_get_post200_response_property_policy_list_inner import V1PropertyGetPost200ResponsePropertyPolicyListInner
    from lodgea-python.model.v1_property_get_post200_response_property_property_info import V1PropertyGetPost200ResponsePropertyPropertyInfo
    from lodgea-python.model.v1_property_get_post200_response_property_record_created import V1PropertyGetPost200ResponsePropertyRecordCreated
    from lodgea-python.model.v1_property_get_post200_response_property_record_modified import V1PropertyGetPost200ResponsePropertyRecordModified
    from lodgea-python.model.v1_property_get_post200_response_property_service_list_inner import V1PropertyGetPost200ResponsePropertyServiceListInner
    from lodgea-python.model.v1_property_get_post200_response_property_transaction import V1PropertyGetPost200ResponsePropertyTransaction
    globals()['V1PropertyGetPost200ResponsePropertyAwardListInner'] = V1PropertyGetPost200ResponsePropertyAwardListInner
    globals()['V1PropertyGetPost200ResponsePropertyCancellationGracePeriod'] = V1PropertyGetPost200ResponsePropertyCancellationGracePeriod
    globals()['V1PropertyGetPost200ResponsePropertyContactListInner'] = V1PropertyGetPost200ResponsePropertyContactListInner
    globals()['V1PropertyGetPost200ResponsePropertyFacilityInfo'] = V1PropertyGetPost200ResponsePropertyFacilityInfo
    globals()['V1PropertyGetPost200ResponsePropertyGeo'] = V1PropertyGetPost200ResponsePropertyGeo
    globals()['V1PropertyGetPost200ResponsePropertyGuestInfo'] = V1PropertyGetPost200ResponsePropertyGuestInfo
    globals()['V1PropertyGetPost200ResponsePropertyMediaListInner'] = V1PropertyGetPost200ResponsePropertyMediaListInner
    globals()['V1PropertyGetPost200ResponsePropertyPolicyListInner'] = V1PropertyGetPost200ResponsePropertyPolicyListInner
    globals()['V1PropertyGetPost200ResponsePropertyPropertyInfo'] = V1PropertyGetPost200ResponsePropertyPropertyInfo
    globals()['V1PropertyGetPost200ResponsePropertyRecordCreated'] = V1PropertyGetPost200ResponsePropertyRecordCreated
    globals()['V1PropertyGetPost200ResponsePropertyRecordModified'] = V1PropertyGetPost200ResponsePropertyRecordModified
    globals()['V1PropertyGetPost200ResponsePropertyServiceListInner'] = V1PropertyGetPost200ResponsePropertyServiceListInner
    globals()['V1PropertyGetPost200ResponsePropertyTransaction'] = V1PropertyGetPost200ResponsePropertyTransaction


class V1PropertyGetPost200ResponseProperty(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'code': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'record_created': (V1PropertyGetPost200ResponsePropertyRecordCreated,),  # noqa: E501
            'record_modified': (V1PropertyGetPost200ResponsePropertyRecordModified,),  # noqa: E501
            'property_info': (V1PropertyGetPost200ResponsePropertyPropertyInfo,),  # noqa: E501
            'guest_info': (V1PropertyGetPost200ResponsePropertyGuestInfo,),  # noqa: E501
            'award_list': ([V1PropertyGetPost200ResponsePropertyAwardListInner],),  # noqa: E501
            'contact_list': ([V1PropertyGetPost200ResponsePropertyContactListInner],),  # noqa: E501
            'facility_info': (V1PropertyGetPost200ResponsePropertyFacilityInfo,),  # noqa: E501
            'media_list': ([V1PropertyGetPost200ResponsePropertyMediaListInner],),  # noqa: E501
            'geo': (V1PropertyGetPost200ResponsePropertyGeo,),  # noqa: E501
            'refinement_date': (float,),  # noqa: E501
            'published': (bool,),  # noqa: E501
            'policy_list': ([V1PropertyGetPost200ResponsePropertyPolicyListInner],),  # noqa: E501
            'uri': (str,),  # noqa: E501
            'transaction': (V1PropertyGetPost200ResponsePropertyTransaction,),  # noqa: E501
            'cancellation_grace_period': (V1PropertyGetPost200ResponsePropertyCancellationGracePeriod,),  # noqa: E501
            'service_list': ([V1PropertyGetPost200ResponsePropertyServiceListInner],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'code': 'code',  # noqa: E501
        'name': 'name',  # noqa: E501
        'record_created': 'recordCreated',  # noqa: E501
        'record_modified': 'recordModified',  # noqa: E501
        'property_info': 'propertyInfo',  # noqa: E501
        'guest_info': 'guestInfo',  # noqa: E501
        'award_list': 'awardList',  # noqa: E501
        'contact_list': 'contactList',  # noqa: E501
        'facility_info': 'facilityInfo',  # noqa: E501
        'media_list': 'mediaList',  # noqa: E501
        'geo': 'geo',  # noqa: E501
        'refinement_date': 'refinementDate',  # noqa: E501
        'published': 'published',  # noqa: E501
        'policy_list': 'policyList',  # noqa: E501
        'uri': 'uri',  # noqa: E501
        'transaction': 'transaction',  # noqa: E501
        'cancellation_grace_period': 'cancellationGracePeriod',  # noqa: E501
        'service_list': 'serviceList',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """V1PropertyGetPost200ResponseProperty - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            code (str): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            record_created (V1PropertyGetPost200ResponsePropertyRecordCreated): [optional]  # noqa: E501
            record_modified (V1PropertyGetPost200ResponsePropertyRecordModified): [optional]  # noqa: E501
            property_info (V1PropertyGetPost200ResponsePropertyPropertyInfo): [optional]  # noqa: E501
            guest_info (V1PropertyGetPost200ResponsePropertyGuestInfo): [optional]  # noqa: E501
            award_list ([V1PropertyGetPost200ResponsePropertyAwardListInner]): [optional]  # noqa: E501
            contact_list ([V1PropertyGetPost200ResponsePropertyContactListInner]): [optional]  # noqa: E501
            facility_info (V1PropertyGetPost200ResponsePropertyFacilityInfo): [optional]  # noqa: E501
            media_list ([V1PropertyGetPost200ResponsePropertyMediaListInner]): [optional]  # noqa: E501
            geo (V1PropertyGetPost200ResponsePropertyGeo): [optional]  # noqa: E501
            refinement_date (float): [optional]  # noqa: E501
            published (bool): [optional]  # noqa: E501
            policy_list ([V1PropertyGetPost200ResponsePropertyPolicyListInner]): [optional]  # noqa: E501
            uri (str): [optional]  # noqa: E501
            transaction (V1PropertyGetPost200ResponsePropertyTransaction): [optional]  # noqa: E501
            cancellation_grace_period (V1PropertyGetPost200ResponsePropertyCancellationGracePeriod): [optional]  # noqa: E501
            service_list ([V1PropertyGetPost200ResponsePropertyServiceListInner]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """V1PropertyGetPost200ResponseProperty - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            code (str): [optional]  # noqa: E501
            name (str): [optional]  # noqa: E501
            record_created (V1PropertyGetPost200ResponsePropertyRecordCreated): [optional]  # noqa: E501
            record_modified (V1PropertyGetPost200ResponsePropertyRecordModified): [optional]  # noqa: E501
            property_info (V1PropertyGetPost200ResponsePropertyPropertyInfo): [optional]  # noqa: E501
            guest_info (V1PropertyGetPost200ResponsePropertyGuestInfo): [optional]  # noqa: E501
            award_list ([V1PropertyGetPost200ResponsePropertyAwardListInner]): [optional]  # noqa: E501
            contact_list ([V1PropertyGetPost200ResponsePropertyContactListInner]): [optional]  # noqa: E501
            facility_info (V1PropertyGetPost200ResponsePropertyFacilityInfo): [optional]  # noqa: E501
            media_list ([V1PropertyGetPost200ResponsePropertyMediaListInner]): [optional]  # noqa: E501
            geo (V1PropertyGetPost200ResponsePropertyGeo): [optional]  # noqa: E501
            refinement_date (float): [optional]  # noqa: E501
            published (bool): [optional]  # noqa: E501
            policy_list ([V1PropertyGetPost200ResponsePropertyPolicyListInner]): [optional]  # noqa: E501
            uri (str): [optional]  # noqa: E501
            transaction (V1PropertyGetPost200ResponsePropertyTransaction): [optional]  # noqa: E501
            cancellation_grace_period (V1PropertyGetPost200ResponsePropertyCancellationGracePeriod): [optional]  # noqa: E501
            service_list ([V1PropertyGetPost200ResponsePropertyServiceListInner]): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
